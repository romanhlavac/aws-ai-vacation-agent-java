Ukaž příklad, jak naimplementovat jednoduchého AI agenta nad AWS. Např, který se zeptá, kam chci jet na dovolenou a doplní počasí k vybrané destinaci. Pokud bude třeba kódovat na BE, zvol Java. Doplň přesný a podrobný postup nasazení v AWS. Dodej také codebase pro IntelliJ Idea.
ChatGPT said:
Thought for 43s

Skvělé zadání — pojďme to rovnou postavit end-to-end. Připravil jsem ti hotovou Java (Lambda) codebase + SAM šablonu a přesný návod nasazení na AWS. Můžeš ji otevřít v IntelliJ IDEA a jedním příkazem deploynout.

Stáhnout celý projekt (ZIP)

Co dostaneš

AI agent (Lambda, Java 21), který:

pokud nezná destinaci, zeptá se „Kam chceš jet na dovolenou?“

jakmile má destinaci, vyhledá geolokaci (Open-Meteo Geocoding) a vrátí 7denní předpověď (Open-Meteo Forecast) v češtině

Amazon Bedrock (LLM) pro extrakci destinace z volného textu

API Gateway endpoint POST /chat

SAM šablonu (template.yaml) včetně práv a CORS

Maven projekt připravený pro IntelliJ IDEA (shade/uber JAR)

Jak to nasadit (přesné kroky)

Předpoklady

AWS účet + aws configure (role s oprávněními: Lambda, API Gateway, CloudFormation, Logs, bedrock:InvokeModel).

Povol přístup k modelu v Amazon Bedrock (v konzoli Bedrock → Model access vyber model a klikni Enable).

Nainstaluj: Java 21, Maven 3.9+, AWS SAM CLI.

Doporučený region: us-east-1.

Stáhni a otevři projekt

Rozbal ZIP a otevři složku v IntelliJ IDEA jako Maven projekt.

Nastav model v Bedrocku

V souboru template.yaml je parametr BedrockModelId. Vlož přesné modelId z tvojí Bedrock konzole, např.:

anthropic.claude-3-5-sonnet-20240620-v1:0
(modelId se může měnit – vždy použij ten, který v regionu vidíš)

Build & Deploy

sam build
sam deploy --guided


Při --guided vyplň:

Stack name: ai-vacation-agent

AWS Region: například us-east-1

Parameter BedrockModelId: vlož své modelId (viz výše)

ostatní klidně potvrď (SAM si uloží samconfig.toml)

Po úspěchu uvidíš API URL (např. https://...execute-api....amazonaws.com/Prod).

Vyzkoušej endpoint

# 1) bez destinace -> agent se zeptá
curl -s -X POST "$API_URL/chat" \
  -H "Content-Type: application/json" \
  -d '{"sessionId":"demo1","message":""}' | jq .

# 2) s destinací v textu
curl -s -X POST "$API_URL/chat" \
  -H "Content-Type: application/json" \
  -d '{"sessionId":"demo1","message":"Chci jet do Prahy"}' | jq .

# 3) explicitně destinaci
curl -s -X POST "$API_URL/chat" \
  -H "Content-Type: application/json" \
  -d '{"sessionId":"demo1","destination":"Prague"}' | jq .


Úklid

sam delete

Poznámky k implementaci

Handler: com.example.agent.AgentHandler (Lambda Java 21, API Gateway Proxy).

LLM volání: BedrockRuntimeClient.invokeModel (Anthropic messages schema přes JSON). ModelId se předává přes env var BEDROCK_MODEL_ID (SAM parametr).

Geocoding + Počasí: Open-Meteo (bez API klíče) – nejdřív geocoding, pak 7-denní forecast v timezone destinace.

Odpověď obsahuje:

needsDestination (bool), destinationResolved, reply (text v češtině),

weather (surový JSON forecastu pro případné vlastní UI vizualizace).

Chceš to rozšířit třeba o DynamoDB (stav konverzace), guardrails, nebo nasadit přes CDK místo SAM? Řekni a upravím projekt podle tvého stacku.